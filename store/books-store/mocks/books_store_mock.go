// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gtforge/BookStore/store/books-store (interfaces: BooksStoreInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/gtforge/BookStore/models"
)

// MockBooksStoreInterface is a mock of BooksStoreInterface interface
type MockBooksStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBooksStoreInterfaceMockRecorder
}

// MockBooksStoreInterfaceMockRecorder is the mock recorder for MockBooksStoreInterface
type MockBooksStoreInterfaceMockRecorder struct {
	mock *MockBooksStoreInterface
}

// NewMockBooksStoreInterface creates a new mock instance
func NewMockBooksStoreInterface(ctrl *gomock.Controller) *MockBooksStoreInterface {
	mock := &MockBooksStoreInterface{ctrl: ctrl}
	mock.recorder = &MockBooksStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBooksStoreInterface) EXPECT() *MockBooksStoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBooksStoreInterface) Create(arg0 string, arg1 int) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBooksStoreInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBooksStoreInterface)(nil).Create), arg0, arg1)
}

// DecreaseQuantity mocks base method
func (m *MockBooksStoreInterface) DecreaseQuantity(arg0 uint) error {
	ret := m.ctrl.Call(m, "DecreaseQuantity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseQuantity indicates an expected call of DecreaseQuantity
func (mr *MockBooksStoreInterfaceMockRecorder) DecreaseQuantity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseQuantity", reflect.TypeOf((*MockBooksStoreInterface)(nil).DecreaseQuantity), arg0)
}

// Delete mocks base method
func (m *MockBooksStoreInterface) Delete(arg0 uint) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBooksStoreInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBooksStoreInterface)(nil).Delete), arg0)
}

// GetAll mocks base method
func (m *MockBooksStoreInterface) GetAll() ([]models.Book, error) {
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBooksStoreInterfaceMockRecorder) GetAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBooksStoreInterface)(nil).GetAll))
}

// GetById mocks base method
func (m *MockBooksStoreInterface) GetById(arg0 uint) (models.Book, error) {
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockBooksStoreInterfaceMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBooksStoreInterface)(nil).GetById), arg0)
}

// GetPerPage mocks base method
func (m *MockBooksStoreInterface) GetPerPage(arg0 int) ([]models.Book, error) {
	ret := m.ctrl.Call(m, "GetPerPage", arg0)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerPage indicates an expected call of GetPerPage
func (mr *MockBooksStoreInterfaceMockRecorder) GetPerPage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerPage", reflect.TypeOf((*MockBooksStoreInterface)(nil).GetPerPage), arg0)
}

// Update mocks base method
func (m *MockBooksStoreInterface) Update(arg0 uint, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBooksStoreInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBooksStoreInterface)(nil).Update), arg0, arg1, arg2)
}
